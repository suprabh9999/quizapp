{"version":3,"sources":["components/header/header.js","components/leftnav/leftNav.js","components/mainContent/mainContent.js","components/layout/layout.js","App.js","serviceWorker.js","index.js"],"names":["header","technologies","Object","keys","TechObj","map","tech","index","react_default","a","createElement","key","className","Link","to","concat","toUpperCase","leftNav","pathParam","window","location","pathname","split","listOfTopics","data","topics","topic","title","NavLink","style","color","join","toLowerCase","mainContent","pathNames","ques","length","path1","path2","questions","questionObj","layout","components_header_header","components_leftnav_leftNav","components_mainContent_mainContent","App","BrowserRouter","components_layout_layout","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ssOAkBeA,EAdA,WACX,IAAMC,EAAeC,OAAOC,KAAKC,GAASC,IAAI,SAACC,EAAMC,GAAP,OAC1CC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAOK,UAAU,YAAWJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAE,IAAAC,OAAMT,IAASA,EAAKU,kBAErE,OACQR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBACRX,qBCUPgB,EAhBC,WACZ,IAAMC,EAAYC,OAAOC,SAASC,SAASC,MAAM,KAAK,GAGhDC,GAFSC,EAAKN,GAAaM,EAAKN,GAAWO,OAAS,IAE9BpB,IAAI,SAACqB,EAAMnB,GAAP,OAAeC,EAAAC,EAAAC,cAAA,MAAIiB,MAAOD,EAAOf,IAAKJ,EAAOK,UAAU,SACnFJ,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAASC,MAAO,CAACC,MAAM,SACtBhB,GAAE,IAAAC,OAAMG,EAAN,KAAAH,OAAmBW,EAAMJ,MAAM,KAAKS,KAAK,IAAIC,gBAAkBN,EAAMV,kBAC5E,OACQR,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACRW,oBCOHU,EAlBK,WAChB,IAAMC,EAAYf,OAAOC,SAASC,SAASC,MAAM,KAC7Ca,EAAO,KACX,GAAGD,EAAUE,OAAO,EAAI,CACpB,IAAMC,EAAQH,EAAU,GAClBI,EAAQJ,EAAU,GAExBC,EADuBI,EAAUF,GAAOC,GAAOC,UACzBlC,IAAI,SAACmC,EAAajC,GAAd,OACtBC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAQiC,EAAYL,QAGrC,OACI3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACVuB,GAAQ,2CCMNM,EAjBA,WACX,OACIjC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAACgC,EAAD,OAEJlC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACXJ,EAAAC,EAAAC,cAACiC,EAAD,OAEJnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAACkC,EAAD,kBCCLC,mLAXX,OACErC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KACAtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAD,eALUC,aCQEC,QACW,cAA7B9B,OAAOC,SAAS8B,UAEe,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.51a4f5cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\nimport { Link } from 'react-router-dom';\r\nimport TechObj from '../topics.json';\r\nconst header = ()=>{\r\n    const technologies = Object.keys(TechObj).map((tech, index)=>(\r\n        <li key={index} className=\"flexItem\"><Link to={`/${tech}`}>{tech.toUpperCase()}</Link></li>\r\n    ));\r\n    return(\r\n            <div>\r\n                <ul className=\"headerContainer\">\r\n                    { technologies }\r\n                </ul>\r\n               \r\n            </div>\r\n        // </Router>\r\n    );   \r\n}\r\nexport default header;","import React from 'react';\r\nimport './leftNav.css';\r\nimport data from '../topics.json';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst leftNav = () =>{\r\n    const pathParam = window.location.pathname.split('/')[1];\r\n    const topics = data[pathParam] ? data[pathParam].topics : [] ;\r\n\r\n    const listOfTopics = topics.map((topic,index)=><li title={topic} key={index} className=\"topic\">\r\n        <NavLink style={{color:'white'}}\r\n         to={`/${pathParam}/${topic.split(' ').join('').toLowerCase()}`}>{topic.toUpperCase()}</NavLink></li>);\r\n    return(\r\n            <ul className=\"leftNavCont\">\r\n                { listOfTopics }\r\n\r\n            </ul>\r\n\r\n    );\r\n};\r\n\r\nexport default leftNav;","import React from 'react';\r\nimport './mainContent.css';\r\nimport questions from '../questions.json';\r\nconst mainContent = ()=>{\r\n    const pathNames = window.location.pathname.split('/');\r\n    let ques = null;\r\n    if(pathNames.length>3)  {\r\n        const path1 = pathNames[2];\r\n        const path2 = pathNames[3];\r\n        const questionsArray = questions[path1][path2].questions;\r\n        ques = questionsArray.map((questionObj, index)=>(\r\n            <h3 key={index}>{questionObj.ques}</h3>\r\n        ));\r\n    };\r\n    return(\r\n        <div className=\"mainContent\">\r\n            {ques || 'Please choose a topics from your left.'}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default mainContent;","import React from 'react';\r\nimport './layout.css';\r\nimport Header from '../header/header';\r\nimport LeftNav from '../leftnav/leftNav';\r\nimport MainContent from '../mainContent/mainContent';\r\nconst layout = ()=>{\r\n    return(\r\n        <div>\r\n            <header>\r\n                <Header/>\r\n            </header>\r\n            <div className=\"contentArea\">\r\n                <div className=\"leftNav\">\r\n                    <LeftNav/>\r\n                </div>\r\n                <div className=\"mainContent\">\r\n                    <MainContent />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default layout;","import React, { Component } from 'react';\nimport './App.css';\nimport Layout from './components/layout/layout';\nimport { BrowserRouter } from 'react-router-dom';\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <div>\n        <Layout/>\n        \n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}